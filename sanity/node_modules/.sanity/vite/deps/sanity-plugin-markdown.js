import {
  PatchEvent,
  definePlugin,
  defineType,
  set,
  unset,
  useClient
} from "./chunk-F7ISLKIX.js";
import "./chunk-KTOY6IQQ.js";
import {
  Box,
  Text,
  dt
} from "./chunk-PCDQS5XE.js";
import "./chunk-X6NMINOW.js";
import "./chunk-EEBIZHOA.js";
import {
  require_jsx_runtime
} from "./chunk-Z66YDESG.js";
import {
  require_react
} from "./chunk-OK4R7XRY.js";
import {
  __toESM
} from "./chunk-ZB72733A.js";

// ../node_modules/sanity-plugin-markdown/lib/index.mjs
import "/Users/samghazzawi/Projects/ghazzawi-tech/node_modules/easymde/dist/easymde.min.css";

// ../node_modules/sanity-plugin-markdown/lib/_chunks-es/plugin.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var MarkdownInputStyles = dt(Box)`
  & .CodeMirror.CodeMirror {
    color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.border};
    background-color: inherit;
  }

  & .cm-s-easymde .CodeMirror-cursor {
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
  }

  & .editor-toolbar,
  .editor-preview-side {
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.border};
  }

  & .CodeMirror-focused .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {
    background-color: ${({ theme }) => {
  var _a, _b, _c;
  return (_c = (_b = (_a = theme.sanity.color.selectable) == null ? void 0 : _a.primary) == null ? void 0 : _b.hovered) == null ? void 0 : _c.bg;
}};
  }

  & .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};
  }

  & .editor-toolbar > * {
    color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
  }

  & .editor-toolbar > .active,
  .editor-toolbar > button:hover,
  .editor-preview pre,
  .cm-s-easymde .cm-comment {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};
  }

  & .editor-preview {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};

    & h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-size: revert;
    }

    & ul,
    li {
      list-style: revert;
      padding: revert;
    }

    & a {
      text-decoration: revert;
    }
  }
`;
var SimpleMdeReact = (0, import_react.lazy)(() => import("./SimpleMdeReact-QZSREFWB.js"));
var defaultMdeTools = [
  "heading",
  "bold",
  "italic",
  "|",
  "quote",
  "unordered-list",
  "ordered-list",
  "|",
  "link",
  "image",
  "code",
  "|",
  "preview",
  "side-by-side"
];
function MarkdownInput(props) {
  const {
    value = "",
    onChange,
    elementProps: { onBlur, onFocus, ref },
    reactMdeProps: { options: mdeCustomOptions, ...reactMdeProps } = {},
    schemaType
  } = props, client = useClient({ apiVersion: "2022-01-01" }), { imageUrl } = schemaType.options ?? {}, imageUpload = (0, import_react.useCallback)(
    (file, onSuccess, onError) => {
      client.assets.upload("image", file).then((doc) => onSuccess(imageUrl ? imageUrl(doc) : `${doc.url}?w=450`)).catch((e) => {
        console.error(e), onError(e.message);
      });
    },
    [client, imageUrl]
  ), mdeOptions = (0, import_react.useMemo)(() => ({
    autofocus: false,
    spellChecker: false,
    sideBySideFullscreen: false,
    uploadImage: true,
    imageUploadFunction: imageUpload,
    toolbar: defaultMdeTools,
    status: false,
    ...mdeCustomOptions
  }), [imageUpload, mdeCustomOptions]), handleChange = (0, import_react.useCallback)(
    (newValue) => {
      onChange(PatchEvent.from(newValue ? set(newValue) : unset()));
    },
    [onChange]
  );
  return (0, import_react.useSyncExternalStore)(
    noop,
    () => true,
    () => false
  ) ? (0, import_jsx_runtime.jsx)(MarkdownInputStyles, { children: (0, import_jsx_runtime.jsx)(import_react.Suspense, { fallback, children: (0, import_jsx_runtime.jsx)(
    SimpleMdeReact,
    {
      ...reactMdeProps,
      ref,
      value,
      onChange: handleChange,
      onBlur,
      onFocus,
      options: mdeOptions,
      spellCheck: false
    }
  ) }) }) : (0, import_jsx_runtime.jsx)(MarkdownInputStyles, { children: fallback });
}
var noop = () => () => {
};
var fallback = (0, import_jsx_runtime.jsx)(Box, { padding: 3, children: (0, import_jsx_runtime.jsx)(Text, { children: "Loading editor..." }) });
var markdownTypeName = "markdown";
var markdownSchemaType = defineType({
  type: "string",
  name: markdownTypeName,
  title: "Markdown",
  components: { input: MarkdownInput }
});
var markdownSchema = definePlugin((config) => ({
  name: "markdown-editor",
  schema: {
    types: [
      config && config.input ? { ...markdownSchemaType, components: { input: config.input } } : markdownSchemaType
    ]
  }
}));
export {
  MarkdownInput,
  defaultMdeTools,
  markdownSchema,
  markdownSchemaType
};
//# sourceMappingURL=sanity-plugin-markdown.js.map
